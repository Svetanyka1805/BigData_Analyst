# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
def zp_func(hours: int, rate: float, bonus_percent: int) -> float:
    salary = hours * rate
    bonus = salary * (bonus_percent/100)
    salary = salary + bonus
    return salary


import calendar
import datetime

num_mn = int(input("Введите рассчетный месяц: "))
h = int(input("Введите кол-во отработанных часов: "))
r = float(input("Введите ставку сотрудника в час: "))

now = datetime.datetime.now()
work_days = len([x for x in calendar.Calendar().itermonthdays2(now.year, num_mn) if x[0] != 0 and x[1] < 5])
bonus_percent = int(round((h * 100) / (work_days * 8), 0))

print(f"Заработная плата сотрудника составляет: {zp_func(h, r, bonus_percent)}")



# 2. Представлен список чисел.
# Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.

ls = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55, 56]
l_rez = [ls[i] for i in range(len(ls)) if 0 < i < len(ls) and ls[i] > ls[i-1]]

print(l_rez)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку.
ls = [val for val in range(20, 241) if val % 20 == 0 or val % 21 == 0]
print(ls)


# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.

ls = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
ls_res = [i for i in ls if ls.count(i) == 1]

print(ls_res)


# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
from functools import reduce

ls = [i for i in range(100, 1001) if i % 2 == 0]
res = reduce(lambda a, x: a * x, ls)

print(res)


# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
import itertools

a = []
for e in itertools.count(5, 7):
    if e > 50:
        break
    else:
        a.append(e)
print(a)

c = 0
for e in itertools.cycle(a):
    print(e)
    if c > 10:
        break
    c += 1


# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n).
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24
from functools import reduce

def fact(n):
    for e in range(1, n+1, 1):
        yield e

res = reduce(lambda fact, x: fact * x, fact(10))

s = ""
for el in fact(10):
    if s != "": s = f"{s} * "
    s = f"{s} {str(el)}"

print(f"10! = {s} = {str(res)}")


