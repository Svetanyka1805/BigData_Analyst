# 1. Реализовать класс «Дата», функция-конструктор которого должна принимать дату в виде строки формата «день-месяц-год».
# В рамках класса реализовать два метода. Первый, с декоратором @classmethod, должен извлекать число, месяц, год и преобразовывать их тип к типу «Число».
# Второй, с декоратором @staticmethod, должен проводить валидацию числа, месяца и года (например, месяц — от 1 до 12).
# Проверить работу полученной структуры на реальных данных.
from datetime import datetime


class Dat:
    fDate: datetime
    dt: str
    fMonths: list = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь',
                     'ноябрь', 'декабрь']
    name_month: list = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября',
                        'Ноябрь', 'Декабрь']

    def __init__(self, pDate):
        try:
            Dat.fDate = datetime.strptime(pDate, '%d-%m-%Y')
            self.get_datepart()
            print(f"Дата = {Dat.fDate.day} {Dat.name_month[Dat.fDate.month % 12 -1]} {Dat.fDate.year}")
        except ValueError as ex:
            print(ex.args)
            Dat.dt = pDate
            print(f"Ошибка в дате {pDate}!\n{self.valid_date(Dat.dt)}")

    @classmethod
    def get_datepart(cls):
        print({"день": cls.fDate.day, "месяц": cls.fDate.month, "год": cls.fDate.year})

    @staticmethod
    def valid_date(dt: datetime):
        Dat.dt = dt
        ls = [int(i) for i in dt.split("-")]
        if (not (ls[0] in range(1, 32)) and (ls[1] in [1, 3, 5, 7, 8, 10, 12])) or (
                not (ls[0] in range(1, 31)) and (ls[1] in [4, 6, 9, 11])):
            return f"Число дня {ls[0]} не существует в месяце {Dat.fMonths[ls[1] % 12 - 1]}"

        elif not (ls[1] in range(1, 13)):
            return f"Номер месяца = {ls[1]} не существует. В году всего 12 месяцев"

        elif ls[0] == 29 and ls[1] == 2 and (ls[2] % 4 != 0):
            return f"В году {ls[2]} число {ls[0]} в месяце {Dat.fMonths[ls[1] % 12 - 1]} не существует"


myDate = Dat(input("Введите дату в формате dd-mm-yyyy: "))
# myDate.get_datepart()


# 2. Создайте собственный класс-исключение, обрабатывающий ситуацию деления на нуль.
# Проверьте его работу на данных, вводимых пользователем.
# При вводе пользователем нуля в качестве делителя программа должна корректно обработать эту ситуацию и не завершиться с ошибкой.

class ErrorDevinionByZero:

    def __init__(self, dividend, divider):

        try:
            print(f"Результат деления = {dividend / divider}")
        except ZeroDivisionError:
            print(f"Ошибка при делении = {dividend} / {divider}. \nДелитель не может бть равен нулю!")

dividend = int(input("Введите делимое = "))
divider = int(input("Введитель делитель = "))
er = ErrorDevinionByZero(dividend, divider)


# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
# пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class ErrorDigital:
    digit: str
    def is_digit(self, digit):
        ErrorDigital.digit = digit
        try:
            return True, int(ErrorDigital.digit)
        except ValueError as ex:
            # print(ex.__str__())
            return False, ex.__str__()


list_digit = list()
check_digit = ErrorDigital()
inpt_digit = input("Введите число = ")
while inpt_digit != "":
    ret = check_digit.is_digit(inpt_digit)
    if ret[0] == True:
        list_digit.append(ret[1])
    else:
        print(F"{inpt_digit} не является числом!")

    inpt_digit = input("Введите следующее число или нажмите Enter для завершения = ")

print(list_digit)


# 4. Начните работу над проектом «Склад оргтехники». Создайте класс, описывающий склад.
# А также класс «Оргтехника», который будет базовым для классов-наследников.
# Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс).
# В базовом классе определить параметры, общие для приведенных типов.
# В классах-наследниках реализовать параметры, уникальные для каждого типа оргтехники.
# 5. Продолжить работу над первым заданием.
# Разработать методы, отвечающие за приём оргтехники на склад и передачу в определенное подразделение компании.
# Для хранения данных о наименовании и количестве единиц оргтехники, а также других данных,
# можно использовать любую подходящую структуру, например словарь.
# 6. Продолжить работу над вторым заданием. Реализуйте механизм валидации вводимых пользователем данных.
# Например, для указания количества принтеров, отправленных на склад, нельзя использовать строковый тип данных.
# Подсказка: постарайтесь по возможности реализовать в проекте «Склад оргтехники» максимум возможностей, изученных на уроках по ООП.

printer = Printer()
scanner = Scanner()
xerox = Xerox()
list_tech = ["принтер", "сканер", "ксерокс"]

tech = input("Введите название техники: ")
while tech != "":
    if (tech in list_tech) == True:
        count = input(f"Введите количество {tech} для заказа ")

        if list_tech.index(tech) == 0:
            res = printer.input_tech_count(count)
        elif list_tech.index(tech) == 1:
            res = scanner.input_tech_count(count)
        elif list_tech.index(tech) == 2:
            res = xerox.input_tech_count(count)

        if res[0] == True:
            print(f"Заказ на {tech} в количестве {count}. Всего количество = {res[1]}")

    else:
        print(f"Мы такое не продаем. Вот список нашей продукции: {list_tech}")

    tech = input("Введите название техники: ")

print(printer.org_count)



# 7. Реализовать проект «Операции с комплексными числами».
# Создайте класс «Комплексное число», реализуйте перегрузку методов сложения и умножения комплексных чисел.
# Проверьте работу проекта, создав экземпляры класса (комплексные числа) и выполнив сложение и умножение созданных экземпляров.
# Проверьте корректность полученного результата.